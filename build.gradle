plugins {

	// Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
	id 'java-gradle-plugin'

	// Publish
	id 'maven-publish'
	id 'com.gradle.plugin-publish' version '0.13.0'
	id 'signing'
}


group = "dev.atsushieno"
version = "1.0.100"

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(11))
	}
}

gradlePlugin {
	// Define the plugin
	plugins {
		jnaeratorPlugin {
			id = 'dev.atsushieno.jnaerator'
			implementationClass = 'org.anarres.gradle.plugin.jnaerator.JNAeratorPlugin'
			displayName = 'atsushieno fork of Anarres JNAERATOR Plugin'
			description = 'A Gradle plugin for the JNAerator binding generator. - fork by atsushieno for package publication certainty.'
		}


	}
}

dependencies {
	implementation 'com.google.code.findbugs:annotations:3.0.1u2'
	implementation "com.nativelibs4java:jnaerator:0.12"
	// https://mvnrepository.com/artifact/commons-io/commons-io
	implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'


	// https://mvnrepository.com/artifact/junit/junit
	testImplementation group: 'junit', name: 'junit', version: '4.13.2'

}

publishing {
	publications {

		pluginPublication(MavenPublication) {

			groupId group
			artifactId "jnaerator-gradle-plugin"
			version version
			from components.java

			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = 'atsushieno fork of Anarres JNAERATOR Plugin'
				description = 'A Gradle plugin for the JNAerator binding generator. - fork by atsushieno for package publication certainty.'
				url.set('https://github.com/atsushieno/gradle-jnaerator-plugin')
				scm {
					url.set('https://github.com/atsushieno/gradle-jnaerator-plugin')
				}

				//properties = [ ]
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}


			}
		}

	}
	repositories {
		maven {
			name = "OSSRH"
			url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
			credentials {
				username = System.getenv("OSSRH_USERNAME")
				password = System.getenv("OSSRH_PASSWORD")
			}
		}

		// keep it as is. It is replaced by CI release builds
		signing {}
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

apply from: "${rootDir}/publish-root.gradle"
apply from: "${rootDir}/publish-module.gradle"
